@using task_management.Web.Services
@inject NavigationManager Navigation
@inject ChatService ChatService

<FluentButton Class="floating-button" @onclick="ToggleChat">
    <FluentIcon Value="@(new Icons.Regular.Size24.Chat())" />
</FluentButton>

<div class="chat-panel @(ChatService.IsPanelOpen ? "open" : "")">
    @if (ChatService.IsPanelOpen)
    {
        <div class="chat-header">
            <span>Chat</span>
            <FluentButton Class="close-button" IconStart="@(new Icons.Regular.Size16.Dismiss())" OnClick="@ToggleChat" />
        </div>
        <div class="chat-content">
            <div class="message-container">
                @foreach (var message in messages)
                {
                    <div class="message">@message</div>
                }
            </div>
            <div class="chat-input">
                <FluentTextField @bind-Value="message" Placeholder="Type a message..." @onkeyup="HandleKeyPress" />
                <FluentButton Appearance="Appearance.Accent" @onclick="SendMessage">Send</FluentButton>
            </div>
        </div>
    }
</div>

<style>
    .floating-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        border-radius: 50%;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-panel {
        position: fixed;
        top: var(--header-height);
        right: -30%;
        width: 30%;
        height: calc(100vh - var(--header-height) - var(--footer-height));
        background: var(--neutral-layer-1);
        border-left: 1px solid var(--neutral-stroke-rest);
        transition: right 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        z-index: 999;
    }

    .chat-panel.open {
        right: 0;
    }

    .chat-header {
        padding: 12px;
        border-bottom: 1px solid var(--neutral-stroke-rest);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-content {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow: hidden;
    }

    .message-container {
        flex: 1;
        overflow-y: auto;
        padding: 12px;
    }

    .message {
        padding: 8px 12px;
        margin: 4px 0;
        background: var(--neutral-layer-2);
        border-radius: 4px;
        word-wrap: break-word;
    }

    .chat-input {
        padding: 12px;
        border-top: 1px solid var(--neutral-stroke-rest);
        display: flex;
        gap: 8px;
    }

    .chat-input ::deep input {
        flex: 1;
    }
</style>

@code {
    private string message = string.Empty;
    private List<string> messages = new();

    protected override void OnInitialized()
    {
        messages = ChatService.GetMessages("user1").ToList();
        ChatService.OnChange += StateHasChanged;
    }

    private async Task ToggleChat()
    {
        ChatService.IsPanelOpen = !ChatService.IsPanelOpen;
        await Task.CompletedTask;
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await ChatService.AddMessage("user1", message);
            messages = ChatService.GetMessages("user1").ToList();
            message = string.Empty;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public void Dispose()
    {
        ChatService.OnChange -= StateHasChanged;
    }
}
