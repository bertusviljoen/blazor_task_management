@page "/taskboards"
@rendermode InteractiveServer
@attribute [OutputCache(Duration = 5)]
@using task_management.Shared.Models
@using task_management.Web.Services
@inject ITaskBoardService TaskBoardService
@inject IDialogService DialogService


<PageTitle>TaskBoards</PageTitle>

<h3>TaskBoards Management</h3>

<p>This component allows you to manage your task boards.</p>

@if (taskBoards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="taskBoardsgrid" 
                    Items="@taskBoards" 
                    GridTemplateColumns="1fr 1fr 1fr 1fr 1fr 1fr" 
                    TGridItem="TaskBoardDto"
                    SelectMode="DataGridSelectMode.Single"
                    SelectFromEntireRow="true"
                    >
            @* <SelectColumn *@
            @*     TGridItem="TaskBoardDto" *@
            @*     SelectMode="DataGridSelectMode.Single" *@
            @*      *@
            @* /> *@
            <PropertyColumn Title="Id" Property="@(c => c!.Id)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Name" Property="@(c => c!.Name)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Description" Property="@(c => c!.Description)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Task Count" Property="@(c => c!.Tasks.Count)" Sortable="true" Align="Align.Center"/>
            <PropertyColumn Title="Created" Property="@(c => c!.CreatedAt)" Sortable="true" Align="Align.End"/>
            <TemplateColumn Title="Actions" Align="@Align.End" >
                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                              OnClick="@(() => OpenEditDialog(context))"/>
                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => { })"/>
            </TemplateColumn>
    </FluentDataGrid>

    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
        <FluentButton Icon="@(new Icons.Filled.Size24.Add())" Text="Add TaskBoard" />
    </FluentStack>
}


@code {
    private FluentDataGrid<TaskBoardDto>? grid;
    private IQueryable<TaskBoardDto>? taskBoards;
    private TaskBoardDto? SelectedTaskBoardDto;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        taskBoards = await GetFromApi();
    }

    private async Task<IQueryable<TaskBoardDto>> GetFromApi()
    {
        var result = await TaskBoardService.GetAllTaskBoardsAsync();
        return result.AsQueryable();
    }
    
    private async Task OpenEditDialog(TaskBoardDto taskBoardDto)
    {
        var dialog = 
            await DialogService.ShowDialogAsync<TaskBoardEditDialog>(
            new TaskBoardEditModel   
            {
                
                    Id = taskBoardDto.Id,
                    Name = taskBoardDto.Name,
                    Description = taskBoardDto.Description
            },
            new DialogParameters()
            {
                Width = "480px",
                Height = "240px",
                Title = $"Updating the {taskBoardDto.Name} sheet",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });
        
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var updatedTaskBoard = result.Data as TaskBoardDto;
            if (updatedTaskBoard != null)
            {
                await TaskBoardService.UpdateTaskBoardAsync(updatedTaskBoard.Id, updatedTaskBoard);
                taskBoards = await GetFromApi();
            }
        }
    }

    private async Task DeleteTaskBoard(TaskBoardDto taskBoard)
    {
        await TaskBoardService.DeleteTaskBoardAsync(taskBoard.Id);
        taskBoards = await GetFromApi();
    }
}
