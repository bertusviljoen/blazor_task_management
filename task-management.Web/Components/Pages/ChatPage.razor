@page "/chat"
@rendermode InteractiveServer
@inherits LayoutComponentBase

<PageTitle>Chat</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch"
    Style="height: 100%; padding: 1rem;">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Stretch"
        VerticalAlignment="VerticalAlignment.Center" Style="margin-bottom: 1rem;">
        <FluentTextField @bind-Value="UserMessage" Placeholder="Type a message..." Style="flex-grow: 1;" />
        <FluentButton IconStart="@(new Icons.Regular.Size20.Attach())" OnClick="AttachFile" />
        <FluentButton IconStart="@(new Icons.Regular.Size20.Call())" OnClick="StartCall" Style="margin-left: 0.5rem;" />
        <FluentButton IconStart="@(new Icons.Regular.Size20.Send())" OnClick="SendMessage"
            Style="margin-left: 0.5rem;" />
    </FluentStack>

    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch"
        Style="flex-grow: 1; overflow-y: auto;">
        @foreach (var message in Messages)
        {
            <FluentCard Style="@($"margin-bottom: 0.5rem; background-color: {GetBackgroundColor}")">
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch"
                    Style="padding: 0.5rem;">
                    <FluentLabel Typo="Typography.H4">@message.Text</FluentLabel>
                    <FluentLabel Typo="Typography.H3" Style="color: #757575;">@message.Timestamp.ToString("g")</FluentLabel>
                </FluentStack>
            </FluentCard>
        }
    </FluentStack>

    @if (IsLoading)
    {
        <FluentProgressRing Style="margin-top: 1rem;" />
    }
</FluentStack>

<style>

</style>

@code {
    private string UserMessage { get; set; } = string.Empty;
    private List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();
    private bool IsLoading { get; set; } = false;

    private object GetBackgroundColor(string sender) => sender == "User" ? "#E0F7FA" : "#FFF3E0";

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserMessage))
        {
            var message = new ChatMessage
                {
                    Text = UserMessage,
                    Timestamp = DateTime.Now,
                    Sender = "User"
                };

            Messages.Add(message);
            UserMessage = string.Empty;

            // Simulate bot response
            IsLoading = true;
            Task.Delay(2000).ContinueWith(_ =>
            {
                var botMessage = new ChatMessage
                    {
                        Text = "This is a bot response.",
                        Timestamp = DateTime.Now,
                        Sender = "Bot"
                    };

                Messages.Add(botMessage);
                IsLoading = false;
                InvokeAsync(StateHasChanged);
            });
        }
    }

    private void AttachFile()
    {
        // Logic to handle file attachment
    }

    private void StartCall()
    {
        // Logic to handle call button click
    }
}
