@page "/"

@using task_management.Shared.Models
@using task_management.Web.Services
@rendermode InteractiveServer
@inject ITaskBoardService TaskBoardApi

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

@if (taskBoards == null)
{
    <FluentProgressRing />
}
else
{
    @foreach (var board in taskBoards)
    {
        <div class="board-section">
            <FluentLabel Typo="Typography.H4" Style="margin: 1rem 0;">@board.Name</FluentLabel>
            <div class="metrics-grid">
                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Task Status</FluentLabel>
                        <FluentLabel>Total Tasks: @board.Tasks.Count</FluentLabel>
                        <FluentLabel>In Progress: @board.Tasks.Count(t => t.Status == TaskItemStatus.InProgress)</FluentLabel>
                        <FluentLabel>Completed: @board.Tasks.Count(t => t.Status == TaskItemStatus.Done)</FluentLabel>
                    </div>
                </FluentCard>

                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Priority Overview</FluentLabel>
                        <FluentLabel>High Priority: @board.Tasks.Count(t => t.Priority == TaskItemPriority.High)</FluentLabel>
                        <FluentLabel>Medium Priority: @board.Tasks.Count(t => t.Priority == TaskItemPriority.Medium)
                        </FluentLabel>
                        <FluentLabel>Low Priority: @board.Tasks.Count(t => t.Priority == TaskItemPriority.Low)</FluentLabel>
                    </div>
                </FluentCard>

                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Time Analysis</FluentLabel>
                        <FluentLabel>Overdue Tasks: @board.Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value.Date <
                    DateTime.Today)</FluentLabel>
                        <FluentLabel>Due Today: @board.Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value.Date ==
                    DateTime.Today)</FluentLabel>
                        <FluentLabel>Due This Week: @board.Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value.Date <=
                    DateTime.Today.AddDays(7))</FluentLabel>
                    </div>
                </FluentCard>

                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Recent Activity</FluentLabel>
                        <FluentLabel>Active Tasks: @board.Tasks.Count(t => t.Status != TaskItemStatus.Done)</FluentLabel>
                        <FluentLabel>Completed Tasks: @board.Tasks.Count(t => t.Status == TaskItemStatus.Done)</FluentLabel>
                    </div>
                </FluentCard>

                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Performance</FluentLabel>
                        <FluentLabel>Completion Rate: @GetBoardCompletionRate(board)%</FluentLabel>
                        <FluentLabel>On-Time Completion: @GetBoardOnTimeCompletionRate(board)%</FluentLabel>
                    </div>
                </FluentCard>

                <FluentCard Class="metric-card">
                    <div Style="padding: 16px; display: flex; flex-direction: column; gap: 12px;">
                        <FluentLabel Typo="Typography.H6">Board Details</FluentLabel>
                        <FluentLabel>Description: @(board.Description ?? "No description")</FluentLabel>
                        <FluentLabel>Last Updated: @(board.Tasks.Any() ? board.Tasks.Max(t => t.DueDate)?.ToString("d") ?? "N/A"
                    : "N/A")</FluentLabel>
                        </div>
                    </FluentCard>
                </div>
            </div>
    }
}

<style>
    .board-section {
        margin-bottom: 2rem;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1rem;
        padding: 1rem;
        /*background: #f0f0f0;*/
        /* Replace with your desired color */
        border-radius: 8px;
    }

    .metric-card {
        min-height: 180px;
        /*background: #f0f0f0;*/
        /* Replace with your desired color */
    }
</style>

@code {
    private TaskBoardDto[] taskBoards;

    protected override async Task OnInitializedAsync()
    {
        var restTaskBoards = await TaskBoardApi.GetAllTaskBoardsAsync();
        taskBoards = restTaskBoards.ToArray();
    }

    private double GetBoardCompletionRate(TaskBoardDto board)
    {
        if (board.Tasks.Count == 0) return 0;
        return Math.Round((double)board.Tasks.Count(t => t.Status == TaskItemStatus.Done) / board.Tasks.Count * 100, 1);
    }

    private double GetBoardOnTimeCompletionRate(TaskBoardDto board)
    {
        var completedTasks = board.Tasks.Count(t => t.Status == TaskItemStatus.Done);
        if (completedTasks == 0) return 0;

        var onTimeTasks = board.Tasks.Count(t =>
        t.Status == TaskItemStatus.Done &&
        (!t.DueDate.HasValue || t.DueDate.Value.Date >= DateTime.Today));

        return Math.Round((double)onTimeTasks / completedTasks * 100, 1);
    }
}
