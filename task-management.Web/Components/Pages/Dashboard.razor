@page "/"

@using task_management.Shared.Models
@using task_management.Web.Services
@rendermode InteractiveServer
@inject ITaskBoardService TaskBoardApi

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<FluentStack Style="margin: 24px 0;" VerticalAlignment="VerticalAlignment.Center">
    <FluentText Typo="Typography.H3" Style="flex: 1;">Task Overview</FluentText>
<FluentButton Appearance="Appearance.Accent" Style="margin-left: auto;" Class="mobile-fab">
        <FluentIcon Value="@(new Icons.Regular.Size24.Add())" />
        New Task
    </FluentButton>
</FluentStack>

@if (taskBoards == null)
{
    <FluentProgressRing />
}
else
{

<FluentGrid Spacing="3" Justify="JustifyContent.SpaceEvenly" OnBreakpointEnter="@OnBreakpointEnterHandler"
        AdaptiveRendering="true" Style="margin-bottom: 24px;">

        @foreach (var taskBoard in taskBoards)
        {
<FluentGridItem xs="12">
<FluentCard Style="padding: 16px;" Class="hover-card">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Start"
            VerticalAlignment="VerticalAlignment.Center" Style="gap: 12px;">
            <FluentIcon Value="@(new Icons.Regular.Size24.Folder())" Style="color: var(--accent-fill-rest);" />
            <FluentText Typo="Typography.H4">@taskBoard.Name</FluentText>
        </FluentStack>
    </FluentCard>
</FluentGridItem>

            <FluentGridItem xs="6" sm="3">
<FluentCard Style="height: 100%;" Class="hover-card">
    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
        VerticalAlignment="VerticalAlignment.Center" Style="gap: 12px; padding: 16px;">
        <FluentIcon Value="@(new Icons.Regular.Size24.TaskListAdd())" Style="font-size: 32px;" />
        <FluentText Typo="Typography.H5" Style="text-align: center;">@taskBoard.Tasks.Count Tasks</FluentText>
    </FluentStack>
</FluentCard>
            </FluentGridItem>

            <FluentGridItem xs="6" sm="3">
<FluentCard Class="hover-card">
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                        VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new Icons.Regular.Size24.ArrowSync())" />
                        <FluentLabel Typo="Typography.H5">
                            @taskBoard.Tasks.Count(t => t.Status == TaskItemStatus.InProgress) In Progress
                        </FluentLabel>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>

            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                        VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new Icons.Regular.Size24.CheckmarkCircle())" />
                        <FluentLabel Typo="Typography.H5">
                            @taskBoard.Tasks.Count(t => t.Status == TaskItemStatus.Done) Completed
                        </FluentLabel>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>

            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                        VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" />
                        <FluentLabel Typo="Typography.H5">
                            @taskBoard.Tasks.Count(t => t.Priority == TaskItemPriority.High) High Priority
                        </FluentLabel>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>

            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                        VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new Icons.Regular.Size24.ClockAlarm())" />
                        <FluentLabel Typo="Typography.H5">
                            @taskBoard.Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value.Date < DateTime.Today) Overdue
                        </FluentLabel>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>
}

<style>
    .hover-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .hover-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }

    .mobile-fab {
        display: none;
    }

    @@media (max-width: 768px) {
        .mobile-fab {
            display: block;
            position: fixed;
            bottom: 24px;
            right: 24px;
            z-index: 100;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            border-radius: 50%;
            width: 56px;
            height: 56px;
            padding: 0;
        }

        .mobile-fab fluent-icon {
            margin: 0;
        }

        .mobile-fab::part(control) {
            border-radius: 50%;
        }

        fluent-grid-item {
            margin-bottom: 12px;
        }

        .hover-card:hover {
            transform: none;
            box-shadow: none;
        }
    }
</style>
    </FluentGrid>
}

@code {

    private TaskBoardDto[] taskBoards;

    JustifyContent Justification = JustifyContent.SpaceEvenly;
    int Spacing = 3;

    protected override async Task OnInitializedAsync()
    {
        var restTaskBoards = await TaskBoardApi.GetAllTaskBoardsAsync();
        taskBoards = restTaskBoards.ToArray();
    }

    void OnBreakpointEnterHandler(GridItemSize size)
    {

    }
}
