@page "/"

@using task_management.Shared.Models
@using task_management.Web.Services
@rendermode InteractiveServer
@inject ICategoryService CategoryApi

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<FluentStack Style="margin-bottom: 24px; visibility: hidden " VerticalAlignment="VerticalAlignment.Center">
    <FluentLabel>Justify</FluentLabel>
    <FluentSelect Items=@(Enum.GetValues<JustifyContent>()) OptionValue="@(c => c.ToAttributeValue())"
        TOption="JustifyContent" Position="SelectPosition.Below" @bind-SelectedOption="@Justification" />
    <FluentLabel>Spacing</FluentLabel>
    <FluentSlider @bind-Value="@Spacing" Min="0" Max="10" Step="1" Style="max-width: 300px; margin-top: 18px;" />
</FluentStack>

@if (categories == null)
{
    <FluentProgressRing />
}
else
{

    <FluentGrid Spacing="@Spacing" Justify="@Justification" OnBreakpointEnter="@OnBreakpointEnterHandler"
        AdaptiveRendering="true">

        @foreach (var category in categories)
        {
            <FluentGridItem xs="6" sm="3">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center"
                        VerticalAlignment="VerticalAlignment.Center">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Folder())" />
                        <FluentLabel Typo="Typography.H4" Style="text-align: center;">@category.Name</FluentLabel>

                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size24.TaskListAdd())" />
                            <FluentLabel Typo="Typography.H5">@category.Tasks.Count Tasks</FluentLabel>
                        </FluentStack>

                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size24.ArrowSync())" />
                            <FluentLabel Typo="Typography.H5">
                                @category.Tasks.Count(t => t.Status == TaskItemStatus.InProgress) In Progress
                            </FluentLabel>
                        </FluentStack>

                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size24.CheckmarkCircle())" />
                            <FluentLabel Typo="Typography.H5">
                                @category.Tasks.Count(t => t.Status == TaskItemStatus.Done) Completed
                            </FluentLabel>
                        </FluentStack>

                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" />
                            <FluentLabel Typo="Typography.H5">
                                @category.Tasks.Count(t => t.Priority == TaskItemPriority.High) High Priority
                            </FluentLabel>
                        </FluentStack>

                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentIcon Value="@(new Icons.Regular.Size24.ClockAlarm())" />
                            <FluentLabel Typo="Typography.H5">
                                @category.Tasks.Count(t => t.DueDate.HasValue && t.DueDate.Value.Date < DateTime.Today) Overdue
                            </FluentLabel>
                        </FluentStack>
                    </FluentStack>
                </FluentCard>
            </FluentGridItem>
        }
        @* <FluentGridItem xs="12"> *@
        @*     <FluentCard> *@
        @*         <FluentDataGrid TGridItem="SalesRecord" Items="@salesData" GridTemplateColumns="1fr 1fr 1fr" *@
        @*             ResizableColumns="true" Sortable="true"> *@
        @*             <PropertyColumn Title="Product" Property="@(item => item.Product)" /> *@
        @*             <PropertyColumn Title="Quantity Sold" Property="@(item => item.QuantitySold)" /> *@
        @*             <PropertyColumn Title="Revenue" Property="@(item => item.Revenue)" /> *@
        @*         </FluentDataGrid> *@
        @*     </FluentCard> *@
        @* </FluentGridItem> *@
    </FluentGrid>
}

@code {

    private CategoryDto[] categories;

    JustifyContent Justification = JustifyContent.SpaceEvenly;
    int Spacing = 3;

    protected override async Task OnInitializedAsync()
    {
        var restCategories = await CategoryApi.GetAllCategoriesAsync();
        categories = restCategories.ToArray();
    }

    void OnBreakpointEnterHandler(GridItemSize size)
    {

    }

    // Sample data model
    public class SalesRecord
    {
        public required string Product { get; set; }
        public int QuantitySold { get; set; }
        public decimal Revenue { get; set; }
    }

    // Sample data
    private IQueryable<SalesRecord> salesData = new List<SalesRecord>
{
new SalesRecord { Product = "Product A", QuantitySold = 100, Revenue = 1000m },
new SalesRecord { Product = "Product B", QuantitySold = 150, Revenue = 1500m },
new SalesRecord { Product = "Product C", QuantitySold = 200, Revenue = 2000m }
}.AsQueryable();
}
