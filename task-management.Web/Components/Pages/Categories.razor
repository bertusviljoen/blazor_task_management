@page "/categories"
@rendermode InteractiveServer
@attribute [OutputCache(Duration = 5)]
@using task_management.Shared.Models
@using task_management.Web.Services
@inject ICategoryService CategoryService

<PageTitle>Categories</PageTitle>

<h3>Categories Management</h3>

<p>This component allows you to manage categories.</p>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Id="categoriesgrid" Items="@categories" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="CategoryDto">
        <ChildContent>
            <PropertyColumn Title="Id" Property="@(c => c!.Id)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Name" Property="@(c => c!.Name)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Description" Property="@(c => c!.Description)" Sortable="true" Align="Align.Start"/>
            <PropertyColumn Title="Task Count" Property="@(c => c!.Tasks.Count)" Sortable="true" Align="Align.Center"/>
            <PropertyColumn Title="Created" Property="@(c => c!.CreatedAt)" Sortable="true" Align="Align.End"/>
        </ChildContent>
        <EmptyContent>
            <FluentIcon Value="@(new Icons.Filled.Size24.Crown())" Color="@Color.Accent"/>&nbsp; Nothing to see here. Carry on!
        </EmptyContent>
        <LoadingContent>
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
                Loading...<br/>
                <FluentProgress Width="240px"/>
            </FluentStack>
        </LoadingContent>
    </FluentDataGrid>
    
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
        <FluentButton Icon="@(new Icons.Filled.Size24.Add())" Text="Add Category" OnClick="AddCategory"/>
    </FluentStack>
}


@code {
    private FluentDataGrid<CategoryDto>? grid;
    private IQueryable<CategoryDto>? categories;
    private SelectedCategoryDto? currentCategory;
    private bool isEditMode = false;
    private bool isModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await GetFromApi();
    }

    private async Task<IQueryable<CategoryDto>> GetFromApi()
    {
        var result = await CategoryService.GetAllCategoriesAsync();
        return result.AsQueryable();
    }

    private void AddCategory()
    {
        currentCategory = new SelectedCategoryDto();
        isEditMode = false;
        isModalOpen = true;
    }

    private void EditCategory(CategoryDto category)
    {
        currentCategory = new SelectedCategoryDto(category);
        isEditMode = true;
        isModalOpen = true;
    }

    private async Task SaveCategory()
    {
        if (currentCategory != null)
        {
            if (isEditMode)
            {
                await CategoryService.UpdateCategoryAsync(currentCategory.Id, currentCategory.ToCategoryDto());
            }
            else
            {
                await CategoryService.CreateCategoryAsync(currentCategory.ToCategoryDto());
            }

            categories = await GetFromApi();
            isModalOpen = false;
        }
    }

    private async Task DeleteCategory(CategoryDto category)
    {
        await CategoryService.DeleteCategoryAsync(category.Id);
        categories = await GetFromApi();
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }
}
