@using task_management.Shared.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components
@using task_management.Web.Components.Pages

@implements IDialogContentComponent<TaskBoardEditModel>

@inject IDialogService DialogService

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Bookmark())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentTextField @bind-Value="@Content.Name">Name:</FluentTextField>
    @if (string.IsNullOrWhiteSpace(Content.Name))
    {
        <FluentLabel Typo="Typography.Caption" Color="Color.Error">Name is required</FluentLabel>
    }
    else if (Content.Name.Length > 100)
    {
        <FluentLabel Typo="Typography.Caption" Color="Color.Error">Name cannot exceed 100 characters</FluentLabel>
    }
    <FluentTextArea @bind-Value="@Content.Description">Description:</FluentTextArea>
    @if (Content.Description.Length > 500)
    {
        <FluentLabel Typo="Typography.Caption" Color="Color.Error">Description cannot exceed 500 characters</FluentLabel>
    }
</FluentDialogBody>

@code {
    [Parameter]
    public TaskBoardEditModel Content { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private async Task SaveAsync()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(Content.Name) || Content.Name.Length > 100 || Content.Description.Length > 500)
        {
            return;
        }

        await Dialog.CloseAsync(new TaskBoardDto(
        Content.Id,
        Content.Name,
        Content.Description,
        new(),
        DateTime.UtcNow
        ));
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
