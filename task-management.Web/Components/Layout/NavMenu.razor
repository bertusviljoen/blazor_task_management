<div class="navmenu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <label for="navmenu-toggle" class="navmenu-icon">
        <FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" />
    </label>
    <nav class="sitenav" aria-labelledby="main-menu">
        <FluentNavMenu Id="main-menu" Collapsible="true" Width="250" Title="Navigation menu" @bind-Expanded="expanded"
            CustomToggle="true">
            <FluentNavLink Href="/" Match="NavLinkMatch.All" Icon="@(new Icons.Regular.Size20.Home())"
                IconColor="Color.Accent">Dashboard</FluentNavLink>
            <FluentNavLink Href="counter" Icon="@(new Icons.Regular.Size20.NumberSymbolSquare())"
                IconColor="Color.Accent">Counter</FluentNavLink>
            <FluentNavLink Href="weather" Icon="@(new Icons.Regular.Size20.WeatherPartlyCloudyDay())"
                           IconColor="Color.Accent">Weather</FluentNavLink>
            <FluentNavLink Href="taskboards" Icon="@(new Icons.Regular.Size20.Folder())"
                           IconColor="Color.Accent">TaskBoards</FluentNavLink>
            <FluentDivider />
            @if (taskBoards != null)
            {
                @foreach (var taskBoard in taskBoards)
                {
                    <FluentNavLink Href="@($"taskboards/{taskBoard.Id}")" Icon="@(new Icons.Regular.Size20.Folder())"
                                   IconColor="Color.Accent">@taskBoard.Name</FluentNavLink>
                }
            }
            <FluentButton Appearance="Appearance.Accent" OnClick="OpenAddTaskBoardDialog">
                <FluentIcon Value="@(new Icons.Regular.Size20.Add())" />
                Add TaskBoard
            </FluentButton>
        </FluentNavMenu>
    </nav>
</div>

@code {
    private bool expanded = true;
    private List<TaskBoardDto>? taskBoards;

    [Inject]
    private ITaskBoardService TaskBoardService { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        taskBoards = (await TaskBoardService.GetAllTaskBoardsAsync()).ToList();
    }

    private async Task OpenAddTaskBoardDialog()
    {
        var dialog = await DialogService.ShowDialogAsync<TaskBoardEditDialog>(
            new TaskBoardEditModel(),
            new DialogParameters()
            {
                Width = "480px",
                Height = "240px",
                Title = "Add New TaskBoard",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var newTaskBoard = result.Data as TaskBoardDto;
            if (newTaskBoard != null)
            {
                await TaskBoardService.CreateTaskBoardAsync(newTaskBoard);
                taskBoards = (await TaskBoardService.GetAllTaskBoardsAsync()).ToList();
            }
        }
    }
}
